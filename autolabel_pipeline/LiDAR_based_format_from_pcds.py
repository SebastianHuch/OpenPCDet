
# Import libraries
from easydict import EasyDict
from tqdm import tqdm
import pandas as pd
import numpy as np
import subprocess
import pathlib
import shutil
import yaml
import csv
import os

from base_functions import load_config, autolabel_path_manager
from main_autolabel import main_pseudo_label, csv_to_dataframe

# Define a working path used to access different paths
working_path = pathlib.Path(__file__).resolve().parents[1]


"""

FILE DESCRIPTION: 
This file generates the LiDAR-based format folder structure from .pcd files. 
It additionally renames the .pcd files to 6 digit XXXXXX.pcd. 

- .pcd files should be placed in home/data/XXX/training/velodyne/ in according to the LiDAR-based format.
- all folders in addition to home/data/XXX/training/velodyne/ are generated with this script.
- LiDAR-based format is generated with respect to DATA.PROJECT.DATASET ( ../data/autolabel_XXX) in autolabel.yaml

INPUT FORMAT: 
|- data
    |- autolabel_XXX
        |- training
            |- velodyne
                |- --> PCDs should be placed here. 
                
OUTPUT FORMAT (generated by this script): 
|- data
    |- autolabel_XXX
        |- training
            |- velodyne
                |- .pcd files 
            |- label_2
        |- ImageSets_KITTI_full
            |- pseudo-label.txt
            |- train.txt
            |- test.txt
            |- val.txt
        |- original
            |- mapping of all og .pcd names to 6 digit XXXXXX names
            
"""

# Function that maps .pcd names to 6 digit format and renames these.
def map_pcd_files_to_6digit_format(path_manager):

    path_project_dataset_pcds = os.path.join(path_manager.get_path('path_project_dataset'), "training/velodyne")
    path_project_dataset_original = os.path.join(path_manager.get_path('path_project_dataset'), "original")
    output_file = os.path.join(path_project_dataset_original, "mapping.txt")
    os.makedirs(path_project_dataset_original, exist_ok=True)

    # Get .pcd filenames.
    pcd_files_list = []
    for filename in os.listdir(path_project_dataset_pcds):
        if filename.endswith('.pcd'):
            pcd_files_list.append(filename)
    sorted_pcd_files = sorted(pcd_files_list)
    print(f"Detected .pcd files: {len(sorted_pcd_files)}")

    # Generate 6 digit .pcd filenames.
    mapped_file_names = [f"{str(i).zfill(6)}.pcd" for i in range(len(sorted_pcd_files))]
    print(f"Generated 6 digit .pcd file names: {len(mapped_file_names)}")

    # Write to mapping file.
    with open(output_file, 'w') as file:
        for i, original_name in enumerate(sorted_pcd_files):
            mapped_name = mapped_file_names[i]
            file.write(f"{original_name}, {mapped_name}\n")
    print(f"Mapping file saved to: {output_file}")


    # Read mapping from the mapping.txt file
    mapping = {}
    with open(output_file, 'r') as file:
        for line in file:
            original_name, mapped_name = line.strip().split(', ')
            mapping[original_name] = mapped_name


    # Rename the .pcd files based on the mapping
    for filename in os.listdir(path_project_dataset_pcds):
        if filename.endswith('.pcd'):
            mapped_name = mapping.get(filename)

            print(f"filename {filename}, mapped_name {mapped_name}")

            if mapped_name:
                original_path = os.path.join(path_project_dataset_pcds, filename)
                new_path = os.path.join(path_project_dataset_pcds, mapped_name)
                os.rename(original_path, new_path)

    return

# Function that generates empty label_2 files from the .pcd files present in /velodyne.
def generate_empty_label_2_files(path_manager):

    print("--> generate_empty_label_2_files")

    path_project_dataset_pcds = os.path.join(path_manager.get_path('path_project_dataset'), "training/velodyne")
    path_project_dataset_label_2 = os.path.join(path_manager.get_path('path_project_dataset'), "training/label_2")
    os.makedirs(path_project_dataset_label_2, exist_ok=True)

    # Get .pcd filenames.
    pcd_files_list = []
    for filename in os.listdir(path_project_dataset_pcds):
        if filename.endswith('.pcd'):
            pcd_files_list.append(filename)
    sorted_pcd_files = sorted(pcd_files_list)
    print(f"Detected .pcd files: {len(sorted_pcd_files)}")

    # Generate empty .txt files with the same names as .pcd files.

    car_string = "Car"
    numbers = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.56, 2.0, 4.55, 10, 0.00, -0.92, 0]

    for pcd_filename in sorted_pcd_files:
        label_2_filename = os.path.splitext(pcd_filename)[0] + '.txt'
        label_2_filepath = os.path.join(path_project_dataset_label_2, label_2_filename)
        print(f"label_2 file: {label_2_filepath}")

        # Create an empty .txt file.
        with open(label_2_filepath, 'w') as label_2_file:
            label_2_file.write(f"{car_string} {' '.join(map(str, numbers))}\n")


    return

# Function that generates the ImageSets necessary to create initial autolabel infos in OpenPCDet.
def generate_ImageSets(path_manager):

    print("--> generate_ImageSets")

    # Define a custom sorting function to sort the file names as 6-digit numbers
    def custom_sort(file_name):
        # Extract and convert the number part to an integer
        number_part = file_name.split('.')[0]
        return int(number_part)

    path_project_dataset_label_2 = os.path.join(path_manager.get_path('path_project_dataset'), "training/label_2")
    path_project_dataset_original_ImageSets = os.path.join(path_manager.get_path('path_project_dataset'), "original/ImageSets_KITTI_full")
    path_project_dataset_ImageSets = os.path.join(path_manager.get_path('path_project_dataset'), "ImageSets_KITTI_full")
    ImageSets_train_file_path = os.path.join(path_project_dataset_ImageSets, 'train.txt')
    ImageSets_pseudo_label_file_path = os.path.join(path_project_dataset_ImageSets, 'pseudo_label.txt')
    ImageSets_test_file_path = os.path.join(path_project_dataset_ImageSets, 'test.txt')
    ImageSets_val_file_path = os.path.join(path_project_dataset_ImageSets, 'val.txt')

    os.makedirs(path_project_dataset_ImageSets, exist_ok=True)
    os.makedirs(path_project_dataset_original_ImageSets, exist_ok=True)

    # Get .txt filenames.
    txt_files = [filename for filename in os.listdir(path_project_dataset_label_2) if filename.endswith('.txt')]
    print("Total label_2 files: ", len(txt_files))

    # Sort the file names using the custom sorting function
    sorted_train_files = sorted(txt_files, key=custom_sort)

    # Write the filenames to train.txt
    with open(ImageSets_train_file_path, 'w') as output_file:
        for filename in sorted_train_files:
            file_name, file_extension = os.path.splitext(filename)
            output_file.write(file_name + '\n')
    shutil.copyfile(ImageSets_train_file_path, os.path.join(path_project_dataset_original_ImageSets, "train.txt"))
    print(f"train.txt saved in: '{ImageSets_train_file_path}'")

    # Test.txt --> all files (normally train.txt + val.txt)
    shutil.copyfile(ImageSets_train_file_path, ImageSets_test_file_path)
    shutil.copyfile(ImageSets_train_file_path, os.path.join(path_project_dataset_original_ImageSets, "test.txt"))
    print(f"test.txt saved in: '{ImageSets_test_file_path}'")

    # Pseudo-label.txt --> all files
    shutil.copyfile(ImageSets_train_file_path, ImageSets_pseudo_label_file_path)
    shutil.copyfile(ImageSets_train_file_path, os.path.join(path_project_dataset_original_ImageSets, "pseudo_label.txt"))
    print(f"pseudo_label.txt saved in: '{ImageSets_pseudo_label_file_path}'")

    # val.txt --> empty file
    with open(ImageSets_val_file_path, 'w'):
        pass
    shutil.copyfile(ImageSets_val_file_path, os.path.join(path_project_dataset_original_ImageSets, "val.txt"))
    print(f"val.txt saved in: '{ImageSets_val_file_path}'")

    return




if __name__ == "__main__":

    # Load EasyDict to access autolabel parameters.
    cfg_autolabel = load_config()
    # Load path manager to access paths easily.
    path_manager = autolabel_path_manager(cfg_autolabel)


    # rename the .pcd files to 6 digit format and save the name map to .txt in original
    #map_pcd_files_to_6digit_format(path_manager)

    # generate empty label_2 files for each .pcd
    generate_empty_label_2_files(path_manager)

    # generate ImageSets_KITTI_full
    #generate_ImageSets(path_manager)





